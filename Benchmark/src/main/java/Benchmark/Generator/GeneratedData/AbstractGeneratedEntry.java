package Benchmark.Generator.GeneratedData;

import Benchmark.Config.ConfigFile;

import java.time.*;

/**
 * Abstract class for the entries generated by the data generator.
 * Contains implementations of the 2 methods required by the interface.
 */
public abstract class AbstractGeneratedEntry implements IGeneratedEntry {
    protected final LocalDateTime datetime;
    protected final Instant instant;

    public AbstractGeneratedEntry(LocalDate date, LocalTime time){
        this.datetime = date.atTime(time);
        this.instant = datetime.toInstant(ZoneOffset.ofHours(0));
    }

    @Override
    public final LocalDateTime getDateTime() {
        return datetime;
    }

    @Override
    public final long getTime(ConfigFile.Granularity granularity){
        switch (granularity){
            case NANOSECOND:
                return instant.getEpochSecond() * 1_000_000_000 + datetime.getNano();
            case MICROSECOND:
                return (instant.getEpochSecond() * 1_000_000_000 + datetime.getNano()) / 1000;
            case MILLISECOND:
                return instant.toEpochMilli();
            case SECOND:
                return instant.getEpochSecond();
            case MINUTE:
                return instant.getEpochSecond() / 60;
            default:
                throw new IllegalStateException("Unexpected value: " + granularity);
        }
    }
}
